/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_intel_gkl_compression_IntelDeflater */

#ifndef _Included_com_intel_gkl_compression_IntelDeflater
#define _Included_com_intel_gkl_compression_IntelDeflater
#ifdef __cplusplus
extern "C" {
#endif
#undef com_intel_gkl_compression_IntelDeflater_DEFLATED
#define com_intel_gkl_compression_IntelDeflater_DEFLATED 8L
#undef com_intel_gkl_compression_IntelDeflater_NO_COMPRESSION
#define com_intel_gkl_compression_IntelDeflater_NO_COMPRESSION 0L
#undef com_intel_gkl_compression_IntelDeflater_BEST_SPEED
#define com_intel_gkl_compression_IntelDeflater_BEST_SPEED 1L
#undef com_intel_gkl_compression_IntelDeflater_BEST_COMPRESSION
#define com_intel_gkl_compression_IntelDeflater_BEST_COMPRESSION 9L
#undef com_intel_gkl_compression_IntelDeflater_DEFAULT_COMPRESSION
#define com_intel_gkl_compression_IntelDeflater_DEFAULT_COMPRESSION -1L
#undef com_intel_gkl_compression_IntelDeflater_FILTERED
#define com_intel_gkl_compression_IntelDeflater_FILTERED 1L
#undef com_intel_gkl_compression_IntelDeflater_HUFFMAN_ONLY
#define com_intel_gkl_compression_IntelDeflater_HUFFMAN_ONLY 2L
#undef com_intel_gkl_compression_IntelDeflater_DEFAULT_STRATEGY
#define com_intel_gkl_compression_IntelDeflater_DEFAULT_STRATEGY 0L
#undef com_intel_gkl_compression_IntelDeflater_NO_FLUSH
#define com_intel_gkl_compression_IntelDeflater_NO_FLUSH 0L
#undef com_intel_gkl_compression_IntelDeflater_SYNC_FLUSH
#define com_intel_gkl_compression_IntelDeflater_SYNC_FLUSH 2L
#undef com_intel_gkl_compression_IntelDeflater_FULL_FLUSH
#define com_intel_gkl_compression_IntelDeflater_FULL_FLUSH 3L
/*
 * Class:     com_intel_gkl_compression_IntelDeflater
 * Method:    initNative
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_intel_gkl_compression_IntelDeflater_initNative
  (JNIEnv *, jclass);

/*
 * Class:     com_intel_gkl_compression_IntelDeflater
 * Method:    resetNative
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_com_intel_gkl_compression_IntelDeflater_resetNative
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     com_intel_gkl_compression_IntelDeflater
 * Method:    deflateNative
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL Java_com_intel_gkl_compression_IntelDeflater_deflateNative
  (JNIEnv *, jobject, jbyteArray, jint);

/*
 * Class:     com_intel_gkl_compression_IntelDeflater
 * Method:    endNative
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_intel_gkl_compression_IntelDeflater_endNative
  (JNIEnv *, jobject);

/*
 * Class:     com_intel_gkl_compression_IntelDeflater
 * Method:    generateHuffman
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_intel_gkl_compression_IntelDeflater_generateHuffman
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
