plugins {
    id 'java'
    id 'maven'
    id 'signing'
    id 'com.palantir.git-version' version '0.5.2'
}

compileJava {
    options.compilerArgs = ['-proc:none', '-Xlint:all','-Werror','-Xdiags:verbose']
}
compileTestJava {
    options.compilerArgs = ['-proc:none', '-Xlint:all','-Werror','-Xdiags:verbose']
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://artifactory.broadinstitute.org/artifactory/libs-snapshot/" }
}

dependencies {
    compile 'commons-io:commons-io:2.4'
    compile 'org.broadinstitute:gatk-native-bindings:1.0.0'
    compile 'org.apache.logging.log4j:log4j-api:2.13.2'
    compile 'org.apache.logging.log4j:log4j-core:2.13.2'
    compile 'com.github.samtools:htsjdk:2.21.1'
    testCompile 'org.testng:testng:7.0.0'
}

 wrapper {
    gradleVersion = '5.6'
}

//===================================================================
// build
//===================================================================
final nativeBuildDir = "$buildDir/native"

task cmakeConfig(type: Exec) {
    // hide stdout, but print stderr
    standardOutput = new ByteArrayOutputStream()
    doFirst {mkdir nativeBuildDir}
    workingDir nativeBuildDir
    commandLine 'cmake', '-Wno-dev', projectDir
    inputs.files fileTree(projectDir) {include '**/CMakeLists.txt'}
    outputs.files "$nativeBuildDir/Makefile"
}

task cmakeBuild(type: Exec) {
    // hide stdout, but print stderr
    standardOutput = new ByteArrayOutputStream()
    workingDir nativeBuildDir
    commandLine 'make', 'install'
    // always run this task
    outputs.upToDateWhen {false}
}

task copyNativeLib(type: Copy) {
    from nativeBuildDir
    into "$buildDir/classes/java/main/com/intel/gkl/native"
    include '*.so'
    include '*.dylib'
}

task buildOnMac(type: Exec) {
    String mac_host = project.ext.properties.mac_host ? project.ext.properties.mac_host : "gkl-mac"
    workingDir '.'
    commandLine 'scripts/buildOnMac.sh', mac_host
    onlyIf {project.hasProperty('mac') || project.hasProperty('mac_host') || gradle.taskGraph.hasTask(uploadArchives)}
}

compileJava.finalizedBy copyNativeLib
copyNativeLib.finalizedBy buildOnMac
copyNativeLib.dependsOn cmakeBuild
cmakeBuild.dependsOn cmakeConfig
test.dependsOn copyNativeLib
//===================================================================
// test
//===================================================================

test {
    def longTestsEnabled = System.getProperty('long_tests')

    def additionalJvmArgs = []

    if (longTestsEnabled != null){
        additionalJvmArgs.add '-Xmx24G'
    }
    useTestNG {
    }
    // propagate system properties to test JVM
    systemProperties = System.getProperties()

    if (project.hasProperty('debug')) {
        jvmArgs('-verbose:jni', '-Xcheck:jni', '-XX:+RestoreMXCSROnJNICalls', *additionalJvmArgs)
    }
    else {
        jvmArgs('-Xcheck:jni', '-XX:+RestoreMXCSROnJNICalls', *additionalJvmArgs)
    }

    testLogging {
        if (!System.env.CI.toString().toBoolean()) {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }

    // always rerun tests
    outputs.upToDateWhen { false }
}

//===================================================================
// release
//===================================================================

final isRelease = project.hasProperty("release")
version = (isRelease ? gitVersion() : gitVersion() + "-SNAPSHOT").replaceAll(".dirty", "")

group = "com.intel.gkl"

jar {
    baseName = "gkl"
    // include LICENSE file in jar
    from "LICENSE"
    exclude "log4j2.xml"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

signing {
    required { isRelease && gradle.taskGraph.hasTask(uploadArchives) }
    sign configurations.archives
}

install.doFirst { println "Version: $version" }

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

//            repository(url: uri('testMaven'))
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: project.findProperty("sonatypeUsername"), password: project.findProperty("sonatypePassword"))
                proxy(host: "proxy-us.intel.com", port: 912, type: 'https')
            }

//            snapshotRepository(url: uri('testMavenSnapshot'))
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: project.findProperty("sonatypeUsername"), password: project.findProperty("sonatypePassword"))
                proxy(host: "proxy-us.intel.com", port: 912, type: 'https')
            }

            pom.project {
                name 'Intel Genomics Kernel Library (GKL)'
                packaging 'jar'
                description 'Genomics compute kernels optimized for Intel Architecture'
                url 'https://github.com/Intel-HLS/GKL'
                scm {
                    connection 'scm:git@github.com:Intel-HLS/GKL.git'
                    developerConnection 'scm:git@github.com:Intel-HLS/GKL.git'
                    url 'scm:git@github.com:Intel-HLS/GKL.git'
                }
                licenses {
                    license {
                        name 'MIT License'
                        url 'https://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                    license {
                        name 'BSD 3-Clause'
                        url 'https://opensource.org/licenses/BSD-3-Clause'
                        distribution 'repo'
                    }
                    license {
                        name 'Zlib License'
                        url 'https://opensource.org/licenses/Zlib'
                        distribution 'repo'
                    }

                }
                developers {
                    developer {
                        name = "George Powley"
                        email = "george.s.powley@intel.com"
                    }
                    developer {
                        name = "Priya Vaidya"
                        email = "priya.n.vaidya@intel.com"
                    }
                    developer {
                        name = "Ernesto Brau"
                        email = "ernesto.brau@intel.com"
                    }
                }
            }
        }
    }
}
